# ~/.bash_prompt
# vim: set ft=sh:

# Options:
# PROMPT_THEME - colors for user@host string (default: blue)

_set_color() {
    local -A colormap
    colormap=(
        [reset]=0
        [default]=39

        [black]=30
        [red]=31
        [green]=32
        [yellow]=33
        [blue]=34
        [magenta]=35
        [cyan]=36
        [white]=37
    )

    # Bright versions are accessed by adding 60 to the color code
    if [[ $1 == 'bright' ]]; then
        shift
        colormap[$1]=$(( ${colormap[$1]} + 60 ))
    fi

    printf '\[\e[0;%sm\]' "${colormap[$1]}"
}

_set_git_string() {
    local result

    # Indicate current git branch and changes, if any
    if git branch --show-current &>/dev/null; then
        result="[î‚  $(git branch --show-current)"

        if (( $(git status -s | wc -l) > 0 )); then
            result+='+]'
        else
            result+=']'
        fi
    fi

    echo "${result}"
}

_set_bash_prompt() {
    local ec=$? # must be set first
    local -A strings
    local input_indicator

    strings=(
        [user]="$(_set_color bright "${PROMPT_THEME:-blue}")\u"
        [host]="$(_set_color "${PROMPT_THEME:-blue}")@\h"
        [path]="$(_set_color white)[\w]"
        [ok]="$(_set_color white)>"
        [err]="$(_set_color bright red)(${ec})>"
        [git]="$(_set_color yellow)$(_set_git_string)"
    )

    if (( ec == 0 )); then
        input_indicator="${strings[ok]}"
    else
        input_indicator="${strings[err]}"
    fi

    PS1="${strings[user]}${strings[host]} ${strings[path]} ${strings[git]}"
    PS1+="\n${input_indicator} "
    PS1+="$(_set_color reset)"
}

PROMPT_COMMAND=_set_bash_prompt
