"
" ~/.vimrc
"

" Bootstrap Vim-Plug
" ------------------
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source ~/.vimrc
endif

"==========
" PLUGINS |
"---------'
call plug#begin('~/.vim/plugged')

" ui
Plug 'airblade/vim-gitgutter'
Plug 'itchyny/lightline.vim'
Plug 'itchyny/vim-gitbranch'
Plug 'maximbaz/lightline-ale'
Plug 'srcery-colors/srcery-vim'
Plug 'tpope/vim-vinegar'

" utils
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'

" syntax
Plug 'dense-analysis/ale'
Plug 'hashivim/vim-terraform'
Plug 'pearofducks/ansible-vim', { 'do': './UltiSnips/generate.sh --style dictionary' }
Plug 'reedes/vim-pencil'
Plug 'rodjek/vim-puppet'
Plug 'vim-python/python-syntax'
Plug 'vim-ruby/vim-ruby'

" snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'andrewstuart/vim-kubernetes'

call plug#end()

"================
" PLUGIN CONFIG |
"---------------
" ALE
" ---------
"let g:ale_open_list = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %code%: %s [%severity%]'

" Ansible
" -------
let g:ansible_unindent_after_newline = 1
" yaml in the files directory of a role aren't playbooks
autocmd BufNewFile,BufRead */files/*.yml,*/files/*.yaml set ft=yaml

" Lightline w/ plugin integration
" -------------------------------
let g:lightline = {}
let g:lightline.colorscheme = 'srcery'
let g:lightline.component_function = {'gitbranch': 'gitbranch#name'}
let g:lightline.component_expand = {
\   'tabs': 'lightline#tabs',
\   'linter_checking': 'lightline#ale#checking',
\   'linter_infos': 'lightline#ale#infos',
\   'linter_warnings': 'lightline#ale#warnings',
\   'linter_errors': 'lightline#ale#errors',
\   'linter_ok': 'lightline#ale#ok',
\}
let g:lightline.component_type = {
\   'tabs': 'tabsel',
\   'close': 'raw',
\   'linter_checking': 'right',
\   'linter_infos': 'right',
\   'linter_warnings': 'warning',
\   'linter_errors': 'error',
\   'linter_ok': 'right',
\}
let g:lightline.active = {
\   'left': [
\       ['mode', 'paste'],
\       ['readonly', 'filename'],
\       ['gitbranch', 'modified']
\   ],
\   'right': [
\       ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'lineinfo'],
\       ['percent'],
\       ['fileformat', 'fileencoding', 'filetype']
\   ]
\}

" Pencil
" ------
let g:pencil#wrapModeDefault = 'soft'
augroup pencil
    autocmd!
    autocmd FileType markdown,mkd call pencil#init()
    autocmd FileType text         call pencil#init()
augroup END

" Puppet
" ------
autocmd BufNewFile,BufRead */manifests/*.pp set ft=puppet

" Python
" ------
let g:python_highlight_all = 1

" Terraform
" ---------
let g:terraform_align = 1
let g:terraform_fmt_on_save = 1
autocmd BufNewFile,BufRead *.hcl set ft=terraform

" Vinegar
" -------
" hide dotfiles by default
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'


"==========
" OPTIONS |
"---------
" Colorscheme
" -----------
let g:srcery_italic = 1
colorscheme srcery

" Interface
" ---------
" hide default modeline
set noshowmode
" show line numbers
set number
" highlight current line
set cursorline
" no line wrap
set nowrap

" Indentation
" -----------
" use spaces
set expandtab
" tab size
set tabstop=4
" indent operation (<< and >>) size
set shiftwidth=4
" show tabs and trailing spaces
set list
set listchars=tab:▸·,trail:·

" Search
" ------
set ignorecase
set smartcase

" Filetypes
" ---------
autocmd FileType ruby,yaml set ts=2 sw=2
autocmd FileType sh set ts=4 sw=4

"==================
" CUSTOM KEYBINDS |
"-----------------
" set leader key to space
let mapleader = " "

" split control
nnoremap <leader>- :Sexplore<CR>
nnoremap <leader>\ :Vexplore<CR>
nnoremap <leader>t :terminal<CR>

" tab control
nnoremap <leader>c :tabnew<CR>
nnoremap <leader>n :tabnext<CR>
nnoremap <leader>N :tabprev<CR>
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt
nnoremap <leader>0 10gt

" toggles should use ctrl
nnoremap <leader><C-f> :FZF<CR>
nnoremap <leader><C-p> :PencilToggle<CR>

" enter clears search results
nnoremap <leader><CR> :nohlsearch<CR>


"================
" MISCELLANEOUS |
"---------------
" use xclipboard if feature is available
if has('clipboard')
    set clipboard^=unnamed,unnamedplus
endif

" enable mouse because I'm a fraud
set mouse=a
